- name: Install certbot package
  become: true
  ansible.builtin.apt:
    name: certbot

# I've elected to disable automated renewals. This requires different
# logic for renewing a certificate than creating new a new one. Rather
# than renew certificates, I use the e-mail notification from letsencrypt
# as cue to repave the PI. This ensures that the bootstrapping process
# just works.
#
# ref: https://eff-certbot.readthedocs.io/en/stable/using.html#automated-renewals
- name: Disable certbot.timer
  become: true
  ansible.builtin.service:
    name: certbot.timer
    enabled: false
    state: stopped


# In order for this task to work, the FQDNs need to have dns records set
# to my home IP address, and port 80 needs to be forwarded to the PI from
# the router.
# TODO: inject fqdns from the playbook
- name: Acquire certificates
  become: true
  # This breaks when making it a full qualified module name
  command: |
    certbot certonly --standalone --non-interactive --agree-tos
    -d {{ item.fqdn }} \
    -m {{ item.email }}
  args:
    creates: /etc/letsencrypt/live/{{ item.fqdn }}/fullchain.pem
  loop:
    - fqdn: www.goodenoughmoney.com
      email: "scottmuc@gmail.com"
    - fqdn: home.scottmuc.com
      email: "scottmuc@gmail.com"


- name: Install nginx package
  become: true
  ansible.builtin.apt:
    name: nginx


- name: Setup vhost directories
  become: true
  ansible.builtin.file:
    path: /opt/{{ item.vhost }}
    state: directory
    owner: root
    group: admin
    mode: '0775'
  loop:
    - vhost: goodenoughmoney.com
    - vhost: home.scottmuc.com


- name: Install vhost configs
  become: true
  ansible.builtin.copy:
    src: root/etc/nginx/sites-available/{{ item.vhost }}
    dest: /etc/nginx/sites-available/{{ item.vhost }}
    owner: root
    group: admin
    mode: '0664'
  notify:
    - Restart nginx
  loop:
    - vhost: goodenoughmoney.com
    - vhost: home.scottmuc.com


- name: Enable vhosts
  become: true
  ansible.builtin.file:
    src: /etc/nginx/sites-available/{{ item.vhost }}
    dest: /etc/nginx/sites-enabled/{{ item.vhost }}
    state: link
  loop:
    - vhost: goodenoughmoney.com
    - vhost: home.scottmuc.com


- name: Serve private IP for public websites
  become: true
  ansible.builtin.copy:
    dest: /etc/unbound/unbound.conf.d/local-websites.conf
    owner: root
    group: root
    mode: '0664'
    content: |
      server:
        local-data: "home.scottmuc.com.   IN    A   192.168.2.10"
  notify:
    - Restart unbound

# Favouring complete overwrite of the configuration file coming from the
# package manager due to reasons identified here:
# https://serverfault.com/questions/825363/override-default-nginx-http-configuration-without-changing-default-nginx-conf
- name: Nginx configuration
  become: true
  ansible.builtin.copy:
    src: root/etc/nginx/nginx.conf
    dest: /etc/nginx/nginx.conf
    owner: root
    group: admin
    mode: '0664'
  notify:
    - Restart nginx


- name: Enable stub_status
  become: true
  ansible.builtin.copy:
    src: root/etc/nginx/conf.d/status.conf
    dest: /etc/nginx/conf.d/status.conf
    owner: root
    group: admin
    mode: '0664'
  notify:
    - Restart nginx


# Only ensure nginx is started after all the webserver related configuration
# has been applied. See the following comment as for the context:
# https://github.com/scottmuc/infrastructure/issues/74#issuecomment-2156133447
- name: Start nginx
  become: true
  ansible.builtin.service:
    name: nginx
    state: started
    enabled: true

# vim: ft=yaml.ansible
