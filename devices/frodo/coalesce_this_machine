#!/usr/bin/env bash

set -e
set -u

# from https://stackoverflow.com/a/246128
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
REPO_DIR="$( cd "${DIR}/../../" >/dev/null 2>&1 && pwd )"
COMMON_DIR="${REPO_DIR}/homedirs/common"

main() {
  symlink_all_the_things
  install_os_packages
  default_to_zsh
  install_jetbrains_mono_nerdfont
  install_nvim
  install_golang "1.22.3"
  install_python_dependencies
  install_1password_cli "2.12.0"
  install_all_things_docker
  install_mise
  install_mods
  install_obsidian
  install_vivaldi
}

# Many would argue that I should replace this function with the stow command, see:
# https://www.gnu.org/software/stow/
#
# I don't see what a separate tool would provide with this, so I prefer fewer dependencies
# and something that can run without a bootstrapping step.
symlink_all_the_things() {
  local homedir_source dotfiles_dir common_dotfiles_dir
  homedir_source=$(cd "${DIR}/"; pwd)
  dotfiles_dir="${homedir_source}/dotfiles"
  common_dotfiles_dir="${COMMON_DIR}/dotfiles"

  # shellcheck disable=SC2174
  mkdir -p -m 0700 ~/.gnupg
  # shellcheck disable=SC2174
  mkdir -p -m 0700 ~/.ssh
  mkdir -p ~/.config

  ln -sfv "${common_dotfiles_dir}/dot.gnupg/gpg-agent.conf" ~/.gnupg/gpg-agent.conf
  ln -sfv "${common_dotfiles_dir}/dot.githelpers" ~/.githelpers
  ln -sfv "${common_dotfiles_dir}/dot.tmux.conf" ~/.tmux.conf
  ln -sfv "${common_dotfiles_dir}/dot.gitconfig" ~/.gitconfig
  ln -sfv "${common_dotfiles_dir}/dot.mrconfig" ~/.mrconfig
  ln -sfv "${common_dotfiles_dir}/dot.tmux.conf" ~/.tmux.conf
  ln -sfv "${common_dotfiles_dir}/dot.zshrc" ~/.zshrc

  # https://unix.stackexchange.com/a/355220
  ln -sTfv "${common_dotfiles_dir}/dot.config/mise" ~/.config/mise
  ln -sTfv "${common_dotfiles_dir}/dot.config/nvim" ~/.config/nvim
  ln -sTfv "${dotfiles_dir}/dot.config/alacritty" ~/.config/alacritty
}


install_mise() {
  if command -v mise &> /dev/null; then
    echo "mise exists: $(mise --version)"
    return
  fi

  local keyring_path="/usr/share/keyrings/mise.gpg"
  curl -fsSL https://mise.jdx.dev/gpg-key.pub \
    | sudo gpg --dearmor -o "${keyring_path}"
  sudo chmod a+r "${keyring_path}"

  echo \
      deb [arch="$(dpkg --print-architecture)" signed-by="${keyring_path}"] \
https://mise.jdx.dev/deb stable main | sudo tee /etc/apt/sources.list.d/mise.list > /dev/null

  sudo apt update
  sudo apt install mise -y
}


# https://askubuntu.com/questions/907246/how-to-disable-systemd-resolved-in-ubuntu
# https://askubuntu.com/questions/1426243/ubuntu-22-04-lts-desktop-dhcp-dns-servers-ignored
use_classic_dns_resolution() {
  cat << EOF | sudo tee /etc/systemd/resolved.conf
#  This file is part of systemd.
#
#  systemd is free software; you can redistribute it and/or modify it under the
#  terms of the GNU Lesser General Public License as published by the Free
#  Software Foundation; either version 2.1 of the License, or (at your option)
#  any later version.
#
# Entries in this file show the compile time defaults. Local configuration
# should be created by either modifying this file (or a copy of it placed in
# /etc/ if the original file is shipped in /usr/), or by creating "drop-ins" in
# the /etc/systemd/resolved.conf.d/ directory. The latter is generally
# recommended. Defaults can be restored by simply deleting the main
# configuration file and all drop-ins located in /etc/.
#
# Use 'systemd-analyze cat-config systemd/resolved.conf' to display the full config.
#
# See resolved.conf(5) for details.

[Resolve]
# Some examples of DNS servers which may be used for DNS= and FallbackDNS=:
# Cloudflare: 1.1.1.1#cloudflare-dns.com 1.0.0.1#cloudflare-dns.com 2606:4700:4700::1111#cloudflare-dns.com 2606:4700:4700::1001#cloudflare-dns.com
# Google:     8.8.8.8#dns.google 8.8.4.4#dns.google 2001:4860:4860::8888#dns.google 2001:4860:4860::8844#dns.google
# Quad9:      9.9.9.9#dns.quad9.net 149.112.112.112#dns.quad9.net 2620:fe::fe#dns.quad9.net 2620:fe::9#dns.quad9.net
#DNS=
#FallbackDNS=
#Domains=
#DNSSEC=no
#DNSOverTLS=no
#MulticastDNS=no
#LLMNR=no
#Cache=no-negative
#CacheFromLocalhost=no
DNSStubListener=no
#DNSStubListenerExtra=
#ReadEtcHosts=yes
#ResolveUnicastSingleLabel=no
#StaleRetentionSec=0
EOF

}

install_jetbrains_mono_nerdfont() {
  local font_dir

  if fc-list | grep JetBrains > /dev/null; then
    echo "JetBrainsMono exists"
    return
  fi

  font_dir=~/.local/share/fonts/jetbrains-mono
  mkdir -p "${font_dir}"

  curl -sSLo /tmp/jetbrains-mono.zip https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/JetBrainsMono.zip
  unzip -qq /tmp/jetbrains-mono.zip -d "${font_dir}"
  rm /tmp/jetbrains-mono.zip
  fc-cache -fv
}

install_obsidian() {
  local arch
  arch="$(dpkg --print-architecture)"
  local version="1.5.12"
  local filename="obsidian_${version}_${arch}.snap"

  if command -v obsidian &> /dev/null; then
    echo "obsidian exists: $(snap list obsidian | tail -n 1)"
    return
  fi

  #https://github.com/obsidianmd/obsidian-releases/releases/download/v1.5.12/obsidian_1.5.12_amd64.snap
  curl -sSL -o "/tmp/${filename}" \
    "https://github.com/obsidianmd/obsidian-releases/releases/download/v${version}/${filename}"
  snap install "/tmp/${filename}" --dangerous --classic
}

install_vivaldi() {
  if command -v vivaldi &> /dev/null; then
    echo "vivaldi exists: $(vivaldi --version)"
    return
  fi

  local keyring_path="/usr/share/keyrings/vivaldi.gpg"
  curl -fsSL https://repo.vivaldi.com/archive/linux_signing_key.pub \
    | sudo gpg --dearmor -o "${keyring_path}"
  sudo chmod a+r "${keyring_path}"

  echo \
      deb [arch="$(dpkg --print-architecture)" signed-by="${keyring_path}"] \
https://repo.vivaldi.com/archive/deb/ stable main | sudo tee /etc/apt/sources.list.d/vivaldi.list > /dev/null

  sudo apt update
  sudo apt install vivaldi-stable -y
}

install_mods() {
  if command -v mods &> /dev/null; then
    echo "mods exists: $(mods -v)"
    return
  fi

  local keyring_path="/usr/share/keyrings/charm.gpg"
  curl -fsSL https://repo.charm.sh/apt/gpg.key \
    | sudo gpg --dearmor -o "${keyring_path}"
  sudo chmod a+r "${keyring_path}"

  echo \
      deb [arch="$(dpkg --print-architecture)" signed-by="${keyring_path}"] \
https://repo.charm.sh/apt/ * * | sudo tee /etc/apt/sources.list.d/charm.list > /dev/null

  sudo apt update
  sudo apt install mods -y
}

# Based on https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository
install_all_things_docker() {
  if command -v docker &> /dev/null; then
    echo "docker exists: $(docker -v)"
    return
  fi

  local docker_keyring_path="/usr/share/keyrings/docker.gpg"

  curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
    | sudo gpg --dearmor -o "${docker_keyring_path}"
  sudo chmod a+r "${docker_keyring_path}"

# shellcheck disable=SC1091
  echo \
      deb [arch="$(dpkg --print-architecture)" signed-by="${docker_keyring_path}"] \
https://download.docker.com/linux/ubuntu \
"$(. /etc/os-release && echo "$VERSION_CODENAME") \
stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

  sudo apt-get update
  sudo apt-get install -y \
    docker-ce             \
    docker-ce-cli         \
    containerd.io         \
    docker-buildx-plugin  \
    docker-compose-plugin

  # https://patrickwu.space/2021/03/09/wsl-solution-to-native-docker-daemon-not-starting/
  sudo update-alternatives --set iptables /usr/sbin/iptables-legacy
  sudo usermod -a -G docker "$(whoami)"
}


install_golang() {
  local version
  version="${1:?Must specifiy a desired go lang version}"

  if command -v go &> /dev/null; then
    local current_version
    current_version="$(go version)"
    echo "go exists: ${current_version}"
    if [[ "${current_version}" == *"${version}"* ]]; then
      return
    else
      echo "go is not requested version (${version}). Reinstalling..."
    fi
  fi

  local tarball="go${version}.linux-amd64.tar.gz"
  curl -LsS -o "/tmp/${tarball}" \
    "https://go.dev/dl/go${version}.linux-amd64.tar.gz"

  sudo tar -C /usr/local -zxf "/tmp/${tarball}"
}


# depends on zsh being install of course
default_to_zsh() {
  if ! echo "${SHELL}" | grep zsh > /dev/null; then
    chsh -s "$(which zsh)"
  fi
}

install_nvim() {
  if command -v nvim &> /dev/null; then
    echo "nvim exists: $(nvim --version | head -n 1)"
    return
  fi
  sudo add-apt-repository ppa:neovim-ppa/unstable -y
  sudo apt update
  sudo apt install neovim -y
}

install_os_packages() {
  sudo apt-get update
  sudo apt-get install -y \
    autojump              \
    alacritty             \
    bc                    \
    ca-certificates       \
    curl                  \
    fzf                   \
    git-crypt             \
    gnome-tweak-tool      \
    gnupg                 \
    graphviz              \
    jq                    \
    myrepos               \
    ripgrep               \
    syncthing             \
    tmux                  \
    unzip                 \
    wl-clipboard          \
    zsh
}

install_python_dependencies() {
  sudo apt-get update
  sudo apt-get install -y \
    build-essential       \
    libffi-dev            \
    liblzma-dev           \
    libreadline-dev       \
    libssl-dev            \
    zlib1g-dev
}

# https://developer.1password.com/docs/cli/install-server
install_1password_cli() {
  local version
  # bash shenanigans... use specified version, if none specified, default to 2.0.0
  version="${1:-2.0.0}"
  if command -v op &> /dev/null; then
    echo "op exists: $(op --version)"
    return
  fi

  curl -sSfo op.zip \
    "https://cache.agilebits.com/dist/1P/op2/pkg/v${version}/op_linux_amd64_v${version}.zip" \
    && unzip -od "${REPO_DIR}/vendor/bin" op.zip \
    && rm op.zip
}


main
