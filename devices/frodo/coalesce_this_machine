#!/usr/bin/env bash

set -e
set -u

# from https://stackoverflow.com/a/246128
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
REPO_DIR="$( cd "${DIR}/../../" >/dev/null 2>&1 && pwd )"
LIB_DIR="${REPO_DIR}/homedirs/common/lib"

# shellcheck disable=SC1091
source "${LIB_DIR}/install_asdf.bash"

main() {
  symlink_all_the_things
  install_os_packages
  default_to_zsh
  setup_ssh_dir
  install_nvim
  install_asdf
  install_golang "1.22.3"
  install_python_dependencies
  install_1password_cli "2.12.0"
  install_all_things_docker
  install_mods
  install_obsidian
  install_vivaldi
}

install_obsidian() {
  local arch
  arch="$(dpkg --print-architecture)"
  local version="1.5.12"
  local filename="obsidian_${version}_${arch}.snap"

  if command -v obsidian &> /dev/null; then
    echo "obsidian exists: $(snap list obsidian | tail -n 1)"
    return
  fi

  #https://github.com/obsidianmd/obsidian-releases/releases/download/v1.5.12/obsidian_1.5.12_amd64.snap
  curl -sSL -o "/tmp/${filename}" \
    "https://github.com/obsidianmd/obsidian-releases/releases/download/v${version}/${filename}"
  snap install "/tmp/${filename}" --dangerous --classic
}

install_vivaldi() {
  if command -v vivaldi &> /dev/null; then
    echo "vivaldi exists: $(vivaldi --version)"
    return
  fi

  local keyring_path="/usr/share/keyrings/vivaldi.gpg"
  set -x
  curl -fsSL https://repo.vivaldi.com/archive/linux_signing_key.pub \
    | sudo gpg --dearmor -o "${keyring_path}"
  sudo chmod a+r "${keyring_path}"

  echo \
      deb [arch="$(dpkg --print-architecture)" signed-by="${keyring_path}"] \
https://repo.vivaldi.com/archive/deb/ stable main | sudo tee /etc/apt/sources.list.d/vivaldi.list > /dev/null

  sudo apt update
  sudo apt install vivaldi-stable -y
}

install_mods() {
  if command -v mods &> /dev/null; then
    echo "mods exists: $(mods -v)"
    return
  fi

  local keyring_path="/usr/share/keyrings/charm.gpg"
  curl -fsSL https://repo.charm.sh/apt/gpg.key \
    | sudo gpg --dearmor -o "${keyring_path}"
  sudo chmod a+r "${keyring_path}"

  echo \
      deb [arch="$(dpkg --print-architecture)" signed-by="${keyring_path}"] \
https://repo.charm.sh/apt/ * * | sudo tee /etc/apt/sources.list.d/charm.list > /dev/null

  sudo apt update
  sudo apt install mods -y
}

# Based on https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository
install_all_things_docker() {
  if command -v docker &> /dev/null; then
    echo "docker exists: $(docker -v)"
    return
  fi

  local docker_keyring_path="/usr/share/keyrings/docker.gpg"

  curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
    | sudo gpg --dearmor -o "${docker_keyring_path}"
  sudo chmod a+r "${docker_keyring_path}"

# shellcheck disable=SC1091
  echo \
      deb [arch="$(dpkg --print-architecture)" signed-by="${docker_keyring_path}"] \
https://download.docker.com/linux/ubuntu \
"$(. /etc/os-release && echo "$VERSION_CODENAME") \
stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

  sudo apt-get update
  sudo apt-get install -y \
    docker-ce             \
    docker-ce-cli         \
    containerd.io         \
    docker-buildx-plugin  \
    docker-compose-plugin

  # https://patrickwu.space/2021/03/09/wsl-solution-to-native-docker-daemon-not-starting/
  sudo update-alternatives --set iptables /usr/sbin/iptables-legacy
  sudo usermod -a -G docker "$(whoami)"
}


install_golang() {
  local version
  version="${1:?Must specifiy a desired go lang version}"

  if command -v go &> /dev/null; then
    local current_version
    current_version="$(go version)"
    echo "go exists: ${current_version}"
    if [[ "${current_version}" == *"${version}"* ]]; then
      return
    else
      echo "go is not requested version (${version}). Reinstalling..."
    fi
  fi

  local tarball="go${version}.linux-amd64.tar.gz"
  curl -LsS -o "/tmp/${tarball}" \
    "https://go.dev/dl/go${version}.linux-amd64.tar.gz"

  sudo tar -C /usr/local -zxf "/tmp/${tarball}"
}


setup_ssh_dir() {
  mkdir -p ~/.ssh
  chmod 0700 ~/.ssh
}


# depends on zsh being install of course
default_to_zsh() {
  if ! echo "${SHELL}" | grep zsh > /dev/null; then
    chsh -s "$(which zsh)"
  fi
}

install_nvim() {
  if command -v nvim &> /dev/null; then
    echo "nvim exists: $(nvim --version | head -n 1)"
    return
  fi
  sudo add-apt-repository ppa:neovim-ppa/unstable -y
  sudo apt update
  sudo apt install neovim -y
}

install_os_packages() {
  sudo apt-get update
  sudo apt-get install -y \
    autojump              \
    alacritty             \
    bc                    \
    ca-certificates       \
    curl                  \
    git-crypt             \
    gnome-tweak-tool      \
    gnupg                 \
    graphviz              \
    jq                    \
    myrepos               \
    syncthing             \
    tmux                  \
    unzip                 \
    wl-clipboard          \
    zsh
}

install_python_dependencies() {
  sudo apt-get update
  sudo apt-get install -y \
    build-essential       \
    libffi-dev            \
    liblzma-dev           \
    libreadline-dev       \
    libssl-dev            \
    zlib1g-dev
}

# https://developer.1password.com/docs/cli/install-server
install_1password_cli() {
  local version
  # bash shenanigans... use specified version, if none specified, default to 2.0.0
  version="${1:-2.0.0}"
  if command -v op &> /dev/null; then
    echo "op exists: $(op --version)"
    return
  fi

  curl -sSfo op.zip \
    "https://cache.agilebits.com/dist/1P/op2/pkg/v${version}/op_linux_amd64_v${version}.zip" \
    && unzip -od "${REPO_DIR}/vendor/bin" op.zip \
    && rm op.zip
}


# I am getting the absolute path so that ls -la output goes from:
#
#   .config -> /Users/spring/workspace/infrastructure/homedirs/osx/bin/../dotfiles/dot.config
# to
#   .config -> /Users/spring/workspace/infrastructure/homedirs/osx/dotfiles/dot.config
symlink_all_the_things() {
  local homedir_source common_source dotfiles_dir common_dotfiles_dir
  homedir_source=$(cd "${DIR}/"; pwd)
  common_source="${REPO_DIR}/homedirs/common"
  dotfiles_dir="${homedir_source}/dotfiles"
  common_dotfiles_dir="${common_source}/dotfiles"

  # I don't know how to do this command in a 1 line indempotent way. Repeated executions
  # but symlinks within the symlink.
  if [[ ! -d ~/.config ]]; then
    mkdir ~/.config
  fi

  if [[ ! -d ~/.gnupg ]]; then
    mkdir ~/.gnupg
    chmod 700 ~/.gnupg
  fi
  ln -sfv "${common_dotfiles_dir}/dot.gnupg/gpg-agent.conf" ~/.gnupg/gpg-agent.conf

  ln -sfv "${common_dotfiles_dir}/dot.githelpers" ~/.githelpers
  ln -sfv "${common_dotfiles_dir}/dot.tmux.conf" ~/.tmux.conf
  ln -sfv "${common_dotfiles_dir}/dot.gitconfig" ~/.gitconfig
  ln -sfv "${common_dotfiles_dir}/dot.mrconfig" ~/.mrconfig
  ln -sfv "${common_dotfiles_dir}/dot.tool-versions" ~/.tool-versions
  ln -sfv "${common_dotfiles_dir}/dot.tmux.conf" ~/.tmux.conf

  # https://unix.stackexchange.com/a/355220
  ln -sTfv "${common_dotfiles_dir}/dot.config/nvim" ~/.config/nvim
  ln -sTfv "${dotfiles_dir}/dot.config/alacritty" ~/.config/alacritty

  ln -sfv "${dotfiles_dir}/dot.zshrc" ~/.zshrc
}

main
